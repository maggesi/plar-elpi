%%% ===========================================================================
%%% Tests for formula.
%%% ===========================================================================

accumulate lib.
accumulate formula.
accumulate verbosity.
accumulate test.
accumulate prop.
accumulate fol.


type p, q, r formula.

atomic P :- std.mem! [p,q,r] P.

copy/fm p p :- !.
copy/fm q q :- !.
copy/fm r r :- !.

dcopy/fm p p :- !.
dcopy/fm q q :- !.
dcopy/fm r r :- !.

%%% ---------------------------------------------------------------------------
%%% Run tests.
%%% ---------------------------------------------------------------------------

shorten test.{ run-tests, ok, ko, okb, kob, ok-eq, section }.
shorten verbosity.{ quiet, terse, info, verbose, debug, with-verbosity }.

main :-
    with-verbosity quiet (run-tests
    [ section "Test copy/fm"
    , (ok-eq (q && r !! r) R \
         [ (copy/fm p q :- !)
         , (copy/fm q r :- !)
         , (pi X\ copy/fm X X :- atomic X)
         ] => copy/fm (p && q !! r) R)
    , section "Test onatoms"
    , (ok-eq (r && q !! p) R \
         pi F\
         [ (F p r :- !)
         , (F r p :- !)
         , (pi X\ F X X)
         ] => onatoms F (p && q !! r) R)
    , section "Test atoms"
    , ok-eq [p, q, r] (atoms (p && q !! r))
    , section "Test simplify"
    , ok-eq falsity (simplify (neg truth))
    , ok-eq p (simplify (p && truth))
    , ok-eq falsity (simplify (falsity && p))
    , ok-eq p (simplify (neg (neg p)))
    , ok-eq truth (simplify (p !! truth))
    , ok-eq p (simplify (falsity !! p))
    , ok-eq truth (simplify (falsity ==> p))
    , ok-eq (neg p) (simplify (p ==> falsity))
    , ok-eq p (simplify (truth ==> p))
    , ok-eq truth (simplify (p ==> truth))
    , ok-eq p (simplify (p <=> truth))
    , ok-eq (neg p) (simplify (falsity <=> p))
    , ok-eq truth (simplify (falsity <=> falsity))
    , ok-eq truth (simplify (falsity <=> (falsity <=> (falsity <=> falsity))))
    , ok-eq truth (simplify (falsity ==> (falsity ==> falsity)))
    , ok-eq falsity (simplify (truth ==> falsity))
    , ok-eq ((neg p) && q) (simplify (truth && ((((p ==> falsity) && (truth ==> q)) !! falsity))))
    , ok-eq ((neg p) ==> (neg q)) (simplify ((truth ==> (p <=> falsity)) ==> neg (q !! (falsity && r))))
    , section "Test duality"
    , ok-eq (p !! q) (dual (p && q))
    , ok-eq (p && q) (dual (p !! q))
    , ok-eq (p && (p !! q)) (dual (p !! (p && q)))
    , ok-eq ((p && q) && (p !! r)) (dual ((p !! q) !! (p && r)))
    , section "Test distrib"
    , ok-eq (p && q !! p && r) (distrib (p && (q !! r)))
    , ok-eq (p && r !! q && r) (distrib ((p !! q) && r))
    , section "Test dnf"
    , ok-eq (p !! q) (dnf (p !! q))
    , ok-eq (p && q) (dnf (p && q))
    , ok-eq (neg p !! q) (dnf (p ==> q))
    , ok-eq (p && q !! neg p && neg q) (dnf (p <=> q))
    , ok-eq (falsity) (dnf (p && neg q && q))
    , ok-eq (falsity) (dnf (neg p && p && q))
    , ok-eq (falsity) (dnf (neg p && q && p))
    , ok-eq (falsity) (dnf (p && q && neg p))
    , ok-eq ((p !! neg q !! q)) (dnf (p !! neg q !! q))
    , ok-eq ((neg p !! p !! q)) (dnf (neg p !! p !! q))
    , ok-eq ((neg p !! q !! p)) (dnf (neg p !! q !! p))
    , ok-eq ((p !! q !! neg p)) (dnf (p !! q !! neg p))
    , ok-eq (p !! neg p) (dnf (p !! neg p))
    , ok-eq (p && q && p !! p && q && q) (dnf ((p && q) && (p !! q)))
    , ok-eq (q && r && neg p !! p && neg r) 
            (dnf ((p !! q && r) && ((neg p) !! (neg r))))
    , ok (tautology ({dnf ((p !! q && r) && ((neg p) !! (neg r)))} 
          <=> ((p !! q && r) && ((neg p) !! (neg r)))))
    , section "Test cnf"
    , ok-eq (p !! q) (cnf (p !! q))
    , ok-eq (p && q) (cnf (p && q))
    , ok-eq (p && neg p) (cnf (p && neg p))
    , ok-eq (neg p && p) (cnf (neg p && p))
    , ok-eq (neg p !! q) (cnf (p ==> q))
    , ok-eq (p && neg q && q) (cnf (p && neg q && q))
    , ok-eq ((neg p && p && q)) (cnf (neg p && p && q))
    , ok-eq ((p && q && neg p)) (cnf (p && q && neg p))
    , ok-eq (truth) (cnf (p !! neg q !! q))
    , ok-eq (truth) (cnf (neg p !! p !! q))
    , ok-eq (truth) (cnf (neg p !! q !! p))
    , ok-eq (truth) (cnf (p !! q !! neg p))
    , ok-eq ((neg p !! q) && (p !! neg q)) (cnf (p <=> q))
    , ok-eq (p && q && (p !! q)) (cnf ((p && q) && (p !! q)))
    , ok-eq ((p !! q) && (p !! r) && (neg p !! neg r)) 
            (cnf ((p !! q && r) && ((neg p) !! (neg r))))
    , ok (tautology ({cnf ((p !! q && r) && ((neg p) !! (neg r)))} 
          <=> ((p !! q && r) && ((neg p) !! (neg r)))))
    ]).

%%% ===========================================================================
%%% First-order logic.
%%%
%%% Needs: lib, formula, prop.
%%% ===========================================================================

%%% ---------------------------------------------------------------------------
%%% Terms and quantifiers.
%%% ---------------------------------------------------------------------------

kind term type.

type all, ex (term -> formula) -> formula.

% Copy predicated for terms.
% Clauses to be defined locally or when the language of term is specified.
pred copy/tm i:term, o:term.

% Higher-order predicate pi/tm updates clauses for predicate copy/tm.
pred pi/tm i:(term -> prop).
pi/tm P :-
    pi c \ (copy/tm c c :- !) => P c.

%%% ---------------------------------------------------------------------------
%%% Extend the copy/fm for Propositional calculus.
%%% ---------------------------------------------------------------------------

% Mapping on formulas.
copy/fm (all P) (all P1) :- pi/tm c \ copy/fm (P c) (P1 c).
copy/fm (ex  P) (ex  P1) :- pi/tm c \ copy/fm (P c) (P1 c).

dcopy/fm (all P) P1 :- (pi/tm c \ dcopy/fm (P c) (R c)), copy1/fm (all R) P1.
dcopy/fm (ex  P) P1 :- (pi/tm c \ dcopy/fm (P c) (R c)), copy1/fm (ex  R) P1.

%%% ---------------------------------------------------------------------------
%%% Interpretation of term and formulas.
%%% ---------------------------------------------------------------------------

pred domain o:list A.

pred termval i:term, o:A.

pred holds i:formula, o:bool.
:if "DBG:HOLDS"
holds P B :- print "Enter:" (holds P B), fail.
holds P B :-
    domain D,
    [ (pi Q B \ eval (all Q) B :- !, forallb D (augment Q) B)
    , (pi Q B \ eval (ex  Q) B :- !, existsb D (augment Q) B)
    ] => eval P B.

pred augment i:(term -> formula), i:A, o:bool.
augment P X B :- pi c \ (termval c X :- !) => eval (P c) B.

%%% ---------------------------------------------------------------------------
%%% Closed formulas.
%%% ---------------------------------------------------------------------------

kind formula/c type.
type formula/c formula -> formula/c.
type ctx (term -> formula/c) -> formula/c.

pred holds/c i:formula/c, o:bool.
holds/c (formula/c P) B :- holds P B.
holds/c (ctx Q) B :- domain D, forallb D (augment/c Q) B.

pred augment/c i:(term -> formula/c), i:A, o:bool.
augment/c P X B :- pi c \ (termval c X :- !) => holds/c (P c) B.

%%% ---------------------------------------------------------------------------
%%% Eliminate vacuous quantification.
%%% ---------------------------------------------------------------------------

pred quantify i:((term -> formula) -> formula), i:(term -> formula), o:formula.
quantify Quant P P1 :-
    pi c \ sigma Pc \ Pc = P c,
    if (pi c1 \ Pc = P c1)
       (copy/tm c c => copy/fm Pc P1)
       (copy/tm c c => copy/fm Pc (Q c), P1 = Quant Q).

simplify1 (all P) P1 :- !, quantify all P P1.
simplify1 (ex  P) P1 :- !, quantify ex  P P1.
simplify1 P P :- !.

%%% ---------------------------------------------------------------------------
%%% Negational normal form.
%%% ---------------------------------------------------------------------------

pred negate i:formula, o:formula.
negate (neg   P) P1 :- copy/fm P P1.
negate (P &&  Q) (P1 !! Q1) :- copy/fm (neg P) P1, copy/fm (neg Q) Q1.
negate (P !!  Q) (P1 && Q1) :- copy/fm (neg P) P1, copy/fm (neg Q) Q1.
negate (P ==> Q) (P1 && Q1) :- copy/fm P P1, copy/fm (neg Q) Q1.
negate (P <=> Q) (P1 && Q1 !! P2 && Q2) :- copy/fm P P1, copy/fm (neg Q) Q1,
                                           copy/fm (neg P) P2, copy/fm Q Q2.
negate (all P) P1 :- copy/fm (ex  X \ neg (P X)) P1.
negate (ex  P) P1 :- copy/fm (all X \ neg (P X)) P1.

pred split_imp i:formula, o:formula.
split_imp (P ==> Q) (P1 !! Q1) :- copy/fm (neg P) P1, copy/fm Q Q1.
split_imp (P <=> Q) (P1 && Q1 !! P2 && Q2) :-
    copy/fm P P1, copy/fm Q Q1, copy/fm (neg P) P2, copy/fm (neg Q) Q2.

pred nnf i:formula, o:formula.
nnf P P1 :-
    [ (pi P P1 \ copy/fm (all P) P1 :- quantify all P P1, !)
    , (pi P P1 \ copy/fm (ex  P) P1 :- quantify ex  P P1, !)
    , (pi P P1 \ copy/fm (neg P) P1 :- negate       P P1, !)
    , (pi P P1 \ copy/fm      P  P1 :- split_imp    P P1, !)
    ] => copy/fm P P1.

%%% ---------------------------------------------------------------------------
%%% Prenex normal form.
%%% ---------------------------------------------------------------------------

pred pullquants i:formula, o:formula.
pullquants (all P && all Q) (all R) :- !, pi c \ pullquants (P c && Q c) (R c).
pullquants (ex  P !! ex  Q) (ex  R) :- !, pi c \ pullquants (P c !! Q c) (R c).
pullquants (all P &&     Q) (all R) :- !, pi c \ pullquants (P c && Q  ) (R c).
pullquants (ex  P &&     Q) (ex  R) :- !, pi c \ pullquants (P c && Q  ) (R c).
pullquants (all P !!     Q) (all R) :- !, pi c \ pullquants (P c !! Q  ) (R c).
pullquants (ex  P !!     Q) (ex  R) :- !, pi c \ pullquants (P c !! Q  ) (R c).
pullquants (    P && all Q) (all R) :- !, pi c \ pullquants (P   && Q c) (R c).
pullquants (    P && ex  Q) (ex  R) :- !, pi c \ pullquants (P   && Q c) (R c).
pullquants (    P !! all Q) (all R) :- !, pi c \ pullquants (P   !! Q c) (R c).
pullquants (    P !! ex  Q) (ex  R) :- !, pi c \ pullquants (P   !! Q c) (R c).
pullquants P P.

pred prenex i:formula, o:formula.
prenex P P1 :-
    (pi P P1 \ copy1/fm P P1 :- pullquants P P1, !)
    => dcopy/fm P P1.

pred pnf i:formula, o:formula.
pnf P P1 :-
    simplify P Q1, !,
    nnf Q1 Q2, !,
    prenex Q2 P1.

